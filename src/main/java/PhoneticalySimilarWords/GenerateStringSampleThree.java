package PhoneticalySimilarWords;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Random;
import java.util.Set;

public class GenerateStringSampleThree {
	public  Map<Character, Character> charToNumber;// here key is A,B,C..Z
	public  Map<Integer, String> integerToString;
	GenerateStringSampleThree()
	{
		setMap();
	}
	public  void setMap() {
		charToNumber = new HashMap<Character, Character>();
		integerToString = new HashMap<Integer, String>();
		// int temp='A';
		integerToString.put(1, "BFPV");
		integerToString.put(2, "CGJKQSXZ");
		integerToString.put(3, "DT");
		integerToString.put(4, "L");
		integerToString.put(5, "MN");
		integerToString.put(6, "R");
		integerToString.put(0, "AEHIOUWY");

		for (int i = 0; i < 7; i++) {
			String str = integerToString.get(i);
			char ch = (char) (i + (char) '0');
			// System.out.println("ch:"+ch);
			for (int j = 0; j < str.length(); j++) {
				char tempChar = str.charAt(j);
				charToNumber.put(tempChar, ch);
				/*
				 * if(i==5) { System.out.println("tempChar:"+tempChar); }
				 */
			}

		}
	}

	

	public  String buildString(String str) {
		String fin = "";
		// for(int i=0;i<)
		return fin;
	}
    public  Integer determineSize(String str)
    {
    	int res=1;
    	System.out.println("in det");
    	Map<String,Boolean> m=new HashMap<String,Boolean>();
    	for(int i=0;i<str.length();i++)
    	{
    		char ch=str.charAt(i);
    		System.out.println("123 in for"+" ch:"+ch);
    		char num = charToNumber.get(ch);
    		System.out.println("in for");
			int in = (int) (num - '0');

			 //System.out.println("in:"+in);
			String tempStr = integerToString.get(in);
    		//String tempStr=integerToString.get(ch);
			
			if(m.containsKey(tempStr)==false)
    		{
				if(tempStr.length()-1>0)
					res*=(tempStr.length()-1);
				m.put(tempStr,true);
    		}
    		
    	}
    	return res;
    }
    public  double compareStrings(String stringA, String stringB) {
	    JaroWinkler algorithm = new JaroWinkler();
	    return algorithm.similarity(stringA, stringB);
	}
	public String[] genPhoneticalyString(String str,Integer top) {
		str = str.toUpperCase();
		Set<String> set = new HashSet<String>();
		//String word = soundex(str);
		
		int size =determineSize(str);// Determinesize determine how many string can be generated by algorithm
		System.out.println("size:"+size);
		if(size>25)
		{
			size=25;
		}
		Random random = new Random();
		while (set.size() < size) {
			int temp = random.nextInt(2);
			// 0 for the replace
			// 1 for the add
			
			int toWhichIndex = random.nextInt(str.length());
			
			/*if (toWhichIndex == 0) {
				continue;
			}*/
			char ch = str.charAt(toWhichIndex);
			
			char num = charToNumber.get(ch);
			int in = (int) (num - '0');

			 
			String tempStr = integerToString.get(in);
			int toWhichChar = random.nextInt(tempStr.length());
			char tempChar = tempStr.charAt(toWhichChar);
			
			if (temp == 0) {
				
				StringBuffer bf = new StringBuffer(str);
				bf.setCharAt(toWhichIndex, tempChar);
				tempStr = bf.toString();
				// System.out.println("tempStr:"+tempStr);
				set.add(tempStr);
			} else if (temp == 1)// for adding
			{

				char[] arr = str.toCharArray();
				String fin = "";
				for (int i = 0; i < arr.length; i++) {
					fin += arr[i];
					if (i == toWhichIndex) {
						fin += tempChar;
					}

				}
				set.add(fin);
				
			}
		}
		
		pair[] arr=new pair[size];
		
		Iterator itr=set.iterator();
		int ind=0;
		while(itr.hasNext())
		{
			String temp=(String)itr.next();
			Double dou=compareStrings(str,temp);
			
			arr[ind]=new pair();
			arr[ind].first=new Double(dou);
			arr[ind].second=temp;
			ind++;
		}
		Arrays.sort(arr,new pairComparator() );
		for(pair val:arr){
			System.out.println("first:"+val.first+" second:"+ val.second);
		}
	
		//int top=5;
		//it ensures that top is not greater than the number fo strings
		if(top>=size)
		{
			top=size;
		}
		String[] fin=new String[top];
				for(int i=0;i<top;i++)
				{
					fin[i]=arr[size-1-i].second;
				}
		
		
		
		/*System.out.println("fin:");
		for(int i=0;i<fin.length;i++)
		{
			System.out.println(fin[i]);
		}*/
		return fin;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        
		//GenerateStringSampleFour test = new GenerateStringSampleFour();
		//GenerateStringSampleFive test = new GenerateStringSampleFive();
		GenerateStringSampleThree test = new GenerateStringSampleThree();
		int top = 20;
		String[] arr = test.genPhoneticalyString("city", top);
		for (String val : arr) {
			System.out.println(val);
		}
        System.out.println("size:"+arr.length);
		/*double f=0.80;
		double s=0.85;
		int ind=Double.compare(s, f);
		System.out.println("com:"+Double.compare(s, f));*/
		String str = "monday";
		System.out.println("substring:" + str.substring(1, 5));
	}


}
